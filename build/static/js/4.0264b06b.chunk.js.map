{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","style","dialog","active","NavLink","to","name","MessageItem","message","text","maxLength50","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","messages","Field","component","Textarea","placeholder","validate","required","DialogsForm","dialogItems","messagePage","dialogsData","map","nameApponent","key","messgeItems","messgeData","messageApponent","newMessageBody","dialogs","dialogsItem","values","sendMessage","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","Redirect","React","connect","AuthRedirectComponent","Dialogs","compose","dispatch","sendMessageCreater"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,4B,gGCY7HC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAMC,OAAS,IAAMD,IAAME,QACvC,kBAACC,EAAA,EAAD,CAASC,GAAIP,GAAOD,EAAMS,QCEvBC,EANK,SAACV,GACjB,OACI,yBAAKG,UAAWC,IAAMO,SAAUX,EAAMY,O,iCC6BxCC,EAAcC,YAAU,IAexBC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAbL,SAAChB,GACpB,OACI,0BAAMkB,SAAUlB,EAAMmB,cAClB,yBAAKhB,UAAWC,IAAMgB,UAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUd,KAAK,iBAAiBe,YAAY,kBAAkBC,SAAU,CAACC,IAAUb,KACrG,6BACI,8CAWLc,EA7CK,SAAC3B,GACjB,IAAI4B,EAAc5B,EAAM6B,YAAYC,YAAYC,KAAI,SAACC,GAAD,OAAkB,kBAAC,EAAD,CAAYC,IAAKD,EAAa9B,GAAIO,KAAMuB,EAAavB,KAAMP,GAAI8B,EAAa9B,QAC9IgC,EAAclC,EAAM6B,YAAYM,WAAWJ,KAAI,SAACK,GAAD,OAAqB,kBAAC,EAAD,CAAaH,IAAKG,EAAgBlC,GAAIU,KAAMwB,EAAgBzB,aAC/GX,EAAM6B,YAAYQ,eAMvC,OACI,yBAAKlC,UAAWC,IAAMkC,SAClB,yBAAKnC,UAAWC,IAAMmC,aACjBX,GAEL,yBAAKzB,UAAWC,IAAMgB,UAClB,6BACKc,IAIT,kBAACnB,EAAD,CAAqBG,SAfT,SAACsB,GACjBxC,EAAMyC,YAAYD,EAAOH,qB,yDCX7BK,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,iLAGnC,OAAIC,KAAKjD,MAAM4C,OACR,kBAACG,EAAcE,KAAKjD,OADG,kBAACkD,EAAA,EAAD,CAAU1C,GAAG,eAHR,GACX2C,IAAMJ,WAStC,OAFqCK,YAAQV,EAARU,CAAoCJ,I,OCVzEK,EAAwBP,EAAiBQ,GAiB9BC,sBACXH,aAhBkB,SAACT,GACnB,MAAM,CACFd,YAAac,EAAMd,YACnBe,OAAQD,EAAME,KAAKD,WAIF,SAACY,GACtB,MAAM,CACFf,YAAa,SAACJ,GACVmB,EAASC,YAAmBpB,SAOpCS,EAFWS,CAGbF","file":"static/js/4.0264b06b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1nt9z\",\"dialogsItem\":\"Dialogs_dialogsItem___2xIG\",\"active\":\"Dialogs_active__3S0hu\",\"messages\":\"Dialogs_messages__zvkrY\"};","import React from 'react';\nimport style from './../Dialogs.module.css';\nimport {NavLink} from 'react-router-dom';\n\nconst DialogItem = (props) => {\n    let path = \"/dialogs/\" + props.id\n    return(\n        <div className={style.dialog + ' ' + style.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from 'react';\nimport style from './../Dialogs.module.css';\n\n\nconst MessageItem = (props) => {\n    return(\n        <div className={style.message}>{props.text}</div>\n    )\n}\n\nexport default MessageItem;","import React from 'react';\nimport style from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport MessageItem from './MessageItem/MessageItem';\nimport { Field, reduxForm } from 'redux-form';\nimport { Textarea } from '../common/FormControls/FormControls';\nimport { required, maxLength } from '../../utils/validators/validators';\n\n\nconst DialogsForm = (props) =>{\n    let dialogItems = props.messagePage.dialogsData.map((nameApponent) => <DialogItem key={nameApponent.id} name={nameApponent.name} id={nameApponent.id} />);\n    let messgeItems = props.messagePage.messgeData.map((messageApponent) => <MessageItem key={messageApponent.id} text={messageApponent.message} />);\n    let newMessageBody = props.messagePage.newMessageBody;\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody);\n    }\n    \n    return(\n        <div className={style.dialogs}>\n            <div className={style.dialogsItem}>\n                {dialogItems}\n            </div>\n            <div className={style.messages}>\n                <div>\n                    {messgeItems}\n                </div>\n            </div>\n\n            <AddMessageFormRedux onSubmit={addNewMessage} />\n\n        </div>\n    )\n}\n\nconst maxLength50 = maxLength(50);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={style.messages}>\n                <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter a massege\" validate={[required, maxLength50]} />\n                <div>\n                    <button>Send</button>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({\n    form: \"dialogAddMessageForm\"\n})(AddMessageForm);\n\nexport default DialogsForm;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component{\n        render() {\n            if(!this.props.isAuth) return <Redirect to=\"/login\" />\n            return <Component {...this.props} />\n        }\n    }\n    \n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n};","import {sendMessageCreater} from '../../redux/messageReduser';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nlet AuthRedirectComponent = withAuthRedirect(Dialogs);\n\nlet mapStateToProps = (state) => {\n    return{\n        messagePage: state.messagePage,\n        isAuth: state.auth.isAuth\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return{\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreater(newMessageBody));\n        }\n    };\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(AuthRedirectComponent);"],"sourceRoot":""}